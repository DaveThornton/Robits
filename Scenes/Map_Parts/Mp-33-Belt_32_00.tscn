[gd_scene load_steps=9 format=2]

[ext_resource path="res://Sprites/Map_Parts/MP-33-Belt_32.png" type="Texture" id=1]

[sub_resource type="GDScript" id=8]
script/source = "extends Node2D

# export var right = false
# export var mode = 1
onready var anim = $AnimationPlayer
onready var move_area = $Area2D

var right = true
var mode = 0
var speed = 42
var occ_player_array = []

func _ready():
		Map_Hand.map.connect(\"start\",self ,\"start\")

func start():
	print_debug(\"start    \",mode,\"   \", right)
	if right:
		# move_area.set_gravity_vector(Vector2(self.position.x + 32, self.position.y - 16))
		move_right()
	else:
		# move_area.set_gravity_vector(Vector2(self.position.x - 32, self.position.y  - 16))
		move_left()

func _process(delta):
	if !occ_player_array.empty():
		for j in range(occ_player_array.size()):
			_move_player(j,delta)

func setup(_mode, _right):
	#print_debug(_mode,\"   \",  _right)
	mode = _mode
	right = _right
	start()
	# call_deferred(\"set_mode\", _mode)
	# # set_mode(_mode)
	# # right = _right
	# if _right:
	# 	call_deferred(\"move_right\")
	# else:
	# 	call_deferred(\"move_left\")

func set_mode(new_mode):
	# if new_mode >= 0 && new_mode <= 3:
		# print_debug(\"mode set to \", new_mode)
	mode = new_mode

func move_right():
	print_debug(\"move_right   \", mode)
	right = true
	match mode:
		0: anim.play(\"Left\")
		1: anim.play(\"Mid\")
		2: anim.play(\"Mid\")
		3: anim.play(\"Right\")

func move_left():
	right = false
	match mode:
		0: anim.play_backwards(\"Left\")
		1: anim.play_backwards(\"Mid\")
		2: anim.play_backwards(\"Mid\")
		3: anim.play_backwards(\"Right\")

func stop():
	anim.stop()

func switch_dir():
	if right:
		move_left()
	else:
		move_right()

func _move_player(array_num, delta):
	var p = occ_player_array[array_num]
	if right:
		p.position.x += delta * speed
	else:
		p.position.x -= delta * speed

func _on_Area2D_body_entered(body:Node):
	if body.get_groups().has(\"player\"):
		occ_player_array.append(body)

func _on_Area2D_body_exited(body:Node):
	if body.get_groups().has(\"player\"):
		occ_player_array.erase(body)
"

[sub_resource type="Animation" id=1]
resource_name = "Left"
length = 0.2
loop = true
step = 0.05
tracks/0/type = "value"
tracks/0/path = NodePath("Mp-33-Belt32:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 0.05, 0.1, 0.15 ),
"transitions": PoolRealArray( 1, 1, 1, 1 ),
"update": 1,
"values": [ 4, 5, 6, 7 ]
}
tracks/1/type = "value"
tracks/1/path = NodePath("Wheel:rotation_degrees")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/keys = {
"times": PoolRealArray( 0, 0.05, 0.1, 0.15, 0.2 ),
"transitions": PoolRealArray( 1, 1, 1, 1, 1 ),
"update": 1,
"values": [ 0.0, 22.5, 45.0, 67.5, 90.0 ]
}

[sub_resource type="Animation" id=2]
resource_name = "Mid"
length = 0.2
loop = true
step = 0.05
tracks/0/type = "value"
tracks/0/path = NodePath("Mp-33-Belt32:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 0.05, 0.1, 0.15 ),
"transitions": PoolRealArray( 1, 1, 1, 1 ),
"update": 1,
"values": [ 0, 1, 2, 3 ]
}
tracks/1/type = "value"
tracks/1/path = NodePath("Wheel:rotation_degrees")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/keys = {
"times": PoolRealArray( 0, 0.05, 0.1, 0.15, 0.2 ),
"transitions": PoolRealArray( 1, 1, 1, 1, 1 ),
"update": 1,
"values": [ 0.0, 22.5, 45.0, 67.5, 90.0 ]
}

[sub_resource type="Animation" id=3]
length = 0.001
tracks/0/type = "value"
tracks/0/path = NodePath("Mp-33-Belt32:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 0,
"values": [ 4 ]
}
tracks/1/type = "value"
tracks/1/path = NodePath("Wheel:rotation_degrees")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 0,
"values": [ 0.0 ]
}

[sub_resource type="Animation" id=4]
resource_name = "Right"
length = 0.2
loop = true
step = 0.05
tracks/0/type = "value"
tracks/0/path = NodePath("Mp-33-Belt32:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 0.05, 0.1, 0.15 ),
"transitions": PoolRealArray( 1, 1, 1, 1 ),
"update": 1,
"values": [ 8, 9, 10, 11 ]
}
tracks/1/type = "value"
tracks/1/path = NodePath("Wheel:rotation_degrees")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/keys = {
"times": PoolRealArray( 0, 0.05, 0.1, 0.15, 0.2 ),
"transitions": PoolRealArray( 1, 1, 1, 1, 1 ),
"update": 1,
"values": [ 0.0, 22.5, 45.0, 67.5, 90.0 ]
}

[sub_resource type="RectangleShape2D" id=7]
extents = Vector2( 16, 8 )

[sub_resource type="RectangleShape2D" id=6]
extents = Vector2( 16, 16 )

[node name="Mp-33-Belt_32_00" type="Node2D"]
script = SubResource( 8 )

[node name="Wheel" type="Sprite" parent="."]
texture = ExtResource( 1 )
hframes = 13
frame = 12

[node name="Mp-33-Belt32" type="Sprite" parent="."]
texture = ExtResource( 1 )
hframes = 13
frame = 4

[node name="AnimationPlayer" type="AnimationPlayer" parent="."]
anims/Left = SubResource( 1 )
anims/Mid = SubResource( 2 )
anims/RESET = SubResource( 3 )
anims/Right = SubResource( 4 )

[node name="Area2D" type="Area2D" parent="."]
collision_layer = 917504
collision_mask = 983042
space_override = 3
gravity_vec = Vector2( 1.4, 0 )
linear_damp = 10.0
angular_damp = 10.0

[node name="CollisionShape2D" type="CollisionShape2D" parent="Area2D"]
position = Vector2( 0, -24 )
shape = SubResource( 7 )

[node name="StaticBody2D" type="StaticBody2D" parent="."]
collision_layer = 8
collision_mask = 0

[node name="CollisionShape2D" type="CollisionShape2D" parent="StaticBody2D"]
shape = SubResource( 6 )

[connection signal="body_entered" from="Area2D" to="." method="_on_Area2D_body_entered"]
[connection signal="body_exited" from="Area2D" to="." method="_on_Area2D_body_exited"]
