[gd_scene load_steps=18 format=2]

[ext_resource path="res://Scenes/Projectiles/BadGuy/Proj-BG-10-Laser.tscn" type="PackedScene" id=1]
[ext_resource path="res://Scenes/Explosions/Ex-02-Standard.tscn" type="PackedScene" id=2]
[ext_resource path="res://SFX/SFX_Lib.tscn" type="PackedScene" id=3]
[ext_resource path="res://Sprites/Bad_Guys/Open-Gunner-01.png" type="Texture" id=4]

[sub_resource type="GDScript" id=1]
script/source = "extends KinematicBody2D

export(PackedScene) var projectile
export(PackedScene) var explode
export var active = true
export var active_number = 1

onready var anim = $AnimationPlayer3
onready var sprite = $Sprite
onready var cast_down = $Casts/RayCast2D_Down 
onready var sfx = $SFX_Lib
onready var shoot_timer = $Timer_Shoot

onready var s_pos_up_l = $\"Casts/Shoot_Casts/Shoot-Up-Left-Pos\"
onready var s_pos_up_r = $\"Casts/Shoot_Casts/Shoot-Up-Right-Pos\"
onready var s_pos_down_l = $\"Casts/Shoot_Casts/Shoot-Down-Left-Pos\"
onready var s_pos_down_r = $\"Casts/Shoot_Casts/Shoot-Down-Right-Pos\"
onready var s_pos_left = $\"Casts/Shoot_Casts/Shoot-Left-Pos\"
onready var s_pos_right = $\"Casts/Shoot_Casts/Shoot-Right-Pos\"
onready var s_pos_left_u = $\"Casts/Shoot_Casts/Shoot-Left-Up-Pos\"
onready var s_pos_right_u = $\"Casts/Shoot_Casts/Shoot-Right-Up-Pos\"
onready var s_pos_left_d = $\"Casts/Shoot_Casts/Shoot-Left-Down-Pos\"
onready var s_pos_right_d= $\"Casts/Shoot_Casts/Shoot-Right-Down-Pos\"

onready var cast_shoot_right = $\"Casts/Shoot_Casts/Shoot-Right-RayCast2D\"
onready var cast_shoot_left = $\"Casts/Shoot_Casts/Shoot-Left-RayCast2D\"
onready var cast_shoot_up = $\"Casts/Shoot_Casts/Shoot-Up-RayCast2D\"
onready var cast_shoot_down = $\"Casts/Shoot_Casts/Shoot-Down-RayCast2D\"
onready var cast_shoot_left_up = $\"Casts/Shoot_Casts/Shoot-LeftUp-RayCast2D\"
onready var cast_shoot_right_up = $\"Casts/Shoot_Casts/Shoot-RightUp-RayCast2D\"
onready var cast_shoot_left_down = $\"Casts/Shoot_Casts/Shoot-LeftDown-RayCast2D\"
onready var cast_shoot_right_down = $\"Casts/Shoot_Casts/Shoot-RightDown-RayCast2D\"

var path : = PoolVector2Array() setget set_path
var nav_system
var damage = 20
var last_anim = \"Idle-Mid\"
var last_pos : = Vector2()
var speed : = 60.0
var current_speed_x = 0.0
var current_speed_y = 0.0
#var started = false
var on_floor = false
var on_ladder = false
var over_ladder = false
var ladder_count = 0
var can_shoot = true
var is_right = true
var health = 50
var player = -1
var can_move = false
var time_to_check = .5
var current_time_to_check = 0
var hunted = []

func _ready():
	last_pos = self.global_position
	randomize()
	time_to_check = rand_range(.5, .75)

func _process(delta: float) -> void:
	current_time_to_check += delta
	var shot = _get_shot()
	if shot != 0 && !on_ladder && on_floor:
		if can_shoot:
			can_move = false
			var _shoot_anim = _get_shoot_anim(shot)
			_animation(_shoot_anim)
			var _pos_shot = _change_shoot_pos(shot)
			shoot(_pos_shot)
	else:
		can_move = true
		if !nav_system:
			if self.get_tree().get_current_scene().map.nav_system:
				nav_system = self.get_tree().get_current_scene().map.nav_system
				var map = self.get_tree().get_current_scene().map
				map.connect(\"activate\",self,\"activate\")
				print(\"nav system found \", nav_system)
				nav_system.found_me()
		else:
			if current_time_to_check >= time_to_check:
				current_time_to_check = 0.0
				remove_dead()
				hunted.sort_custom(self, \"sort_distance\")
				if hunted.size() > 0:
					nav_system.find_path(self, hunted[0])
#				if hunted.size() > 0:
#					if is_instance_valid(hunted[0]):
#						print(\"valid in bg 02\")
#						nav_system.find_path(self, hunted[0])
#					else:
#						print(\"not valid bg 02\")
#						hunted.pop_front()
				else:
					active = false
#				for h in hunted.size():
#					if !is_instance_valid(hunted[h]):
#						hunted.remove(h)
#				if self.get_tree().get_current_scene().pawns.get_children().size() > 0:
#					nav_system.find_path(self, self.get_tree().get_current_scene().pawns.get_child(0))
	_on_floor()
	_over_ladders()

func _physics_process(delta):
	if can_move:
		var move_distance = speed * delta
		if active:
			move_along_path(move_distance)
			move_and_slide(Vector2(current_speed_x, current_speed_y))
		
		if last_pos == global_position:
			_animation(\"Idle-Mid\")
		elif int(last_pos.x) != int(global_position.x):
			_animation(\"Run-Mid\")
	#		elif int(last_pos.y) != int(global_position.y):
		elif int(last_pos.y) > int(global_position.y):
			if over_ladder:
				_animation(\"Ladder-Up\")
			else:
				_animation(\"Jump-Up\")
		elif int(last_pos.y) < int(global_position.y):
			if over_ladder:
				_animation(\"Ladder-Up\")
			else:
				_animation(\"Jump-Down\")
	
func move_along_path(distance : float) -> void:
	var start_point : = position
# warning-ignore:unused_variable
	for i in range (path.size()):
		var distance_to_next : = start_point.distance_to(path[0])
#		print(distance_to_next)
		var hor_move = int(self.global_position.x) - int(path[0].x)
		var vert_move = int(self.global_position.y) - int(path[0].y)
		if hor_move < 0:
			_go_right(distance)
		elif hor_move > 0:
			_go_left(distance)
		elif vert_move > 0:
			if over_ladder:
				_go_up_ladder(distance)
			else:
				_go_jump_up(distance)
		elif vert_move < 0:#
			if over_ladder:
				_go_down_ladder(distance)
			else:
				_go_jump_down(distance)
		else:
			_go_no_where(distance)

		if distance <= distance_to_next and distance >= 0.0:
			if (distance * distance_to_next) != 0:
				can_move = true
				position = start_point.linear_interpolate(path[0], distance / distance_to_next)
			break
		elif distance < 0.0:
			position = path[0]
			break
		distance -= distance_to_next
		start_point = path[0]
		path.remove(0)

func set_path(value : PoolVector2Array) -> void:
	path = value
	if value.size() == 0:
		return

func _animation(_current):
	if last_anim != _current:
		anim.play(_current)
		last_anim = _current
	last_pos = global_position

func _get_shoot_anim(_shoot_pos):
	if _shoot_pos == 1:
		return \"Shoot-Up\"
	elif _shoot_pos == 2:
		is_right = true
		sprite.scale.x = 1
		return \"Shoot-Right-Up\"
	elif _shoot_pos == 3:
		is_right = true
		sprite.scale.x = 1
		return \"Shoot-Right\"
	elif _shoot_pos == 4:
		is_right = true
		sprite.scale.x = 1
		return \"Shoot-Right-Down\"
	elif _shoot_pos == 5:
		return \"Shoot-Down\"
	elif _shoot_pos == 6:
		is_right = false
		sprite.scale.x = -1
		return \"Shoot-Right-Down\"
	elif _shoot_pos == 7:
		is_right = false
		sprite.scale.x = -1
		return \"Shoot-Right\"
	elif _shoot_pos == 8:
		is_right = false
		sprite.scale.x = -1
		return \"Shoot-Right-Up\"

func shoot(_pos_shoot):
	can_shoot = false 
	var new_projectile = projectile.instance()
	get_tree().get_current_scene().add_child(new_projectile)
	var _ss = _pos_shoot.global_position
	var _sr = _pos_shoot.global_rotation
	var _sss = _pos_shoot.scale
	new_projectile.start(_sr , _ss, _sss, player, damage)
	sfx.play(\"Laser_Shoot\")
	shoot_timer.start()

func _go_right(_s):
	is_right = true
	sprite.scale = Vector2(1, 1)
	current_speed_x = _s
	current_speed_y = 0

func _go_left(_s):
	is_right = false
	sprite.scale = Vector2(-1, 1)
	current_speed_x = -_s
	current_speed_y = 0

func _go_jump_up(_s):
	current_speed_y = -_s
	current_speed_x = 0
	position.y -= 3
	
func _go_jump_down(_s):
	current_speed_y = _s * .5
	current_speed_x = 0
	position.y += 2

func _go_up_ladder(_s):
	current_speed_y = -_s 
	current_speed_x = 0
	
func _go_down_ladder(_s):
	current_speed_y = _s *.5
	current_speed_x = 0
	position.y += .5

func _go_no_where(_s):
	current_speed_y = 0
	current_speed_x = 0

func hit(_by_who, _by_what, _damage_type, _damage):
	health -= _damage
	if health <= 0:
		print(\"Open Gunner dead\")
		call_deferred(\"_explode\")
		call_deferred(\"free\")

func _explode():
	var x = explode.instance()
	get_tree().get_current_scene().map.add_child(x)
	x.init(9, self.position, str(\"player \", x, \"'s destruct system\"))

func _on_floor():
	on_floor = cast_down.is_colliding()
#	print(on_floor)

func _over_ladders():
	if ladder_count > 0:
		over_ladder = true
	else:
		over_ladder = false
		on_ladder = false

func _change_shoot_pos(_pos_num):
	if _pos_num == 1:
		if is_right:
			return s_pos_up_r
		else:
			return s_pos_up_l
	elif _pos_num == 2:
		return s_pos_right_u
	elif _pos_num == 3:
		return s_pos_right
	elif _pos_num == 4:
		return s_pos_right_d
	elif _pos_num == 5:
		if is_right:
			return s_pos_down_r
		else:
			return s_pos_down_l
	elif _pos_num == 6:
		return s_pos_left_d
	elif _pos_num == 7:
		return s_pos_left
	elif _pos_num == 8:
		return s_pos_left_u

func _get_shot():
#	if !cast_shoot_up.is_colliding() && !cast_shoot_left_up.is_colliding() && !cast_shoot_right_up.is_colliding() && !cast_shoot_down.is_colliding() && !cast_shoot_left_down.is_colliding() && !cast_shoot_right_down.is_colliding() && !cast_shoot_left.is_colliding() && !cast_shoot_right.is_colliding():
#		return 0
	if cast_shoot_left.is_colliding():
		var body = cast_shoot_left.get_collider()
		if is_instance_valid(body):
			if body.get_groups().has(\"player\"):
				activate_add_to_front(0, body)
				return 7
	if cast_shoot_right.is_colliding():
		var body = cast_shoot_right.get_collider()
		if is_instance_valid(body):
			if body.get_groups().has(\"player\"):
				activate_add_to_front(0, body)
				return 3
	if cast_shoot_left_up.is_colliding():
		var body = cast_shoot_left_up.get_collider()
		if is_instance_valid(body):
			if body.get_groups().has(\"player\"):
				activate_add_to_front(0, body)
				return 8
	if cast_shoot_right_up.is_colliding():
		var body = cast_shoot_right_up.get_collider()
		if is_instance_valid(body):
			if body.get_groups().has(\"player\"):
				activate_add_to_front(0, body)
				return 2
	if cast_shoot_left_down.is_colliding():
		var body = cast_shoot_left_down.get_collider()
		if is_instance_valid(body):
			if body.get_groups().has(\"player\"):
				activate_add_to_front(0, body)
				return 6
	if cast_shoot_right_down.is_colliding():
		var body = cast_shoot_right_down.get_collider()
		if is_instance_valid(body):
			if body.get_groups().has(\"player\"):
				activate_add_to_front(0, body)
				return 4
	if cast_shoot_up.is_colliding():
		var body = cast_shoot_up.get_collider()
		if is_instance_valid(body):
			if body.get_groups().has(\"player\"):
				activate_add_to_front(0, body)
				return 1
	if cast_shoot_down.is_colliding():
		var body = cast_shoot_down.get_collider()
		if is_instance_valid(body):
			if body.get_groups().has(\"player\"):
				activate_add_to_front(0, body)
				return 5
	return 0

func _on_Timer_Shoot_timeout():
	can_shoot = true

# warning-ignore:unused_argument
func _on_Area2DOn_Ladder_body_entered(body):
	print(body.position)
	ladder_count += 1

# warning-ignore:unused_argument
func _on_Area2DOn_Ladder_body_exited(body):
	print(body.position)
	ladder_count -= 1
	
func activate(_num, _player):
	if _num == active_number || _num == 0:
		active = true
		if !hunted.has(_player):
			hunted.append(_player)

func activate_add_to_front(_num, _player):
	if _num == active_number || _num == 0:
		active = true
		if !hunted.has(_player):
			hunted.push_front(_player)
		else:
			hunted.push_front(_player)
		

func sort_distance(_a, _b):
	return (abs(self.position.x) - abs(_a.position.x) + abs(self.position.y) - abs(_a.position.y)) > (abs(self.position.x) - abs(_b.position.x) + abs(self.position.y) - abs(_b.position.y))

func remove_dead():
	var h_size = (hunted.size() - 1)
	for h in hunted.size():
#		print(h, h_size, hunted.size())
		if !is_instance_valid(hunted[h_size - h]):
			hunted.remove(h_size - h)
#	print(hunted.size())
"

[sub_resource type="CapsuleShape2D" id=2]
radius = 8.0
height = 29.0

[sub_resource type="CapsuleShape2D" id=3]
radius = 2.0
height = 40.0

[sub_resource type="Animation" id=4]
resource_name = "Idle-Mid"
length = 0.1
tracks/0/type = "value"
tracks/0/path = NodePath("Sprite:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 1,
"values": [ 0 ]
}

[sub_resource type="Animation" id=5]
resource_name = "Jump-Down"
length = 0.1
tracks/0/type = "value"
tracks/0/path = NodePath("Sprite:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 1,
"values": [ 38 ]
}

[sub_resource type="Animation" id=6]
resource_name = "Jump-Up"
length = 0.4
loop = true
tracks/0/type = "value"
tracks/0/path = NodePath("Sprite:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 0.1, 0.2, 0.3 ),
"transitions": PoolRealArray( 1, 1, 1, 1 ),
"update": 1,
"values": [ 53, 54, 55, 56 ]
}

[sub_resource type="Animation" id=7]
resource_name = "Ladder-Up"
length = 0.6
loop = true
tracks/0/type = "value"
tracks/0/path = NodePath("Sprite:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 0.1, 0.2, 0.3, 0.4, 0.5 ),
"transitions": PoolRealArray( 1, 1, 1, 1, 1, 1 ),
"update": 1,
"values": [ 48, 49, 50, 51, 50, 49 ]
}

[sub_resource type="Animation" id=8]
resource_name = "Run-Mid"
length = 0.8
loop = true
tracks/0/type = "value"
tracks/0/path = NodePath("Sprite:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7 ),
"transitions": PoolRealArray( 1, 1, 1, 1, 1, 1, 1, 1 ),
"update": 1,
"values": [ 8, 9, 10, 11, 12, 13, 14, 15 ]
}

[sub_resource type="Animation" id=9]
resource_name = "Shoot-Down"
tracks/0/type = "value"
tracks/0/path = NodePath("Sprite:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 1,
"values": [ 37 ]
}

[sub_resource type="Animation" id=10]
resource_name = "Shoot-Right"
tracks/0/type = "value"
tracks/0/path = NodePath("Sprite:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 1,
"values": [ 0 ]
}

[sub_resource type="Animation" id=11]
resource_name = "Shoot-Right-Down"
tracks/0/type = "value"
tracks/0/path = NodePath("Sprite:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 1,
"values": [ 36 ]
}

[sub_resource type="Animation" id=12]
resource_name = "Shoot-Right-Up"
tracks/0/type = "value"
tracks/0/path = NodePath("Sprite:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 1,
"values": [ 33 ]
}

[sub_resource type="Animation" id=13]
resource_name = "Shoot-Up"
tracks/0/type = "value"
tracks/0/path = NodePath("Sprite:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 1,
"values": [ 34 ]
}

[node name="BG-02-Open_Gunner-01" type="KinematicBody2D" groups=[
"hittable",
"badguy",
]]
collision_layer = 2048
collision_mask = 264734
script = SubResource( 1 )
projectile = ExtResource( 1 )
explode = ExtResource( 2 )

[node name="CollisionShape2D" type="CollisionShape2D" parent="."]
position = Vector2( 0, -23 )
shape = SubResource( 2 )

[node name="SFX_Lib" parent="." instance=ExtResource( 3 )]

[node name="Timer_Shoot" type="Timer" parent="."]
autostart = true

[node name="Casts" type="Node2D" parent="."]

[node name="RayCast2D_Down" type="RayCast2D" parent="Casts"]
position = Vector2( 0, -1 )
enabled = true
cast_to = Vector2( 0, 2 )
collision_mask = 28

[node name="Shoot_Casts" type="Node2D" parent="Casts"]
position = Vector2( 0, -31 )

[node name="Shoot-Right-RayCast2D" type="RayCast2D" parent="Casts/Shoot_Casts"]
enabled = true
cast_to = Vector2( 200, 0 )
collision_mask = 10

[node name="Shoot-RightUp-RayCast2D" type="RayCast2D" parent="Casts/Shoot_Casts"]
position = Vector2( 0, -5 )
enabled = true
cast_to = Vector2( 135, -135 )
collision_mask = 10

[node name="Shoot-RightDown-RayCast2D" type="RayCast2D" parent="Casts/Shoot_Casts"]
enabled = true
cast_to = Vector2( 135, 135 )
collision_mask = 10

[node name="Shoot-Up-RayCast2D" type="RayCast2D" parent="Casts/Shoot_Casts"]
enabled = true
cast_to = Vector2( 0, -200 )
collision_mask = 10

[node name="Shoot-Down-RayCast2D" type="RayCast2D" parent="Casts/Shoot_Casts"]
enabled = true
cast_to = Vector2( 0, 200 )
collision_mask = 10

[node name="Shoot-Left-RayCast2D" type="RayCast2D" parent="Casts/Shoot_Casts"]
enabled = true
cast_to = Vector2( -200, 0 )
collision_mask = 10

[node name="Shoot-LeftUp-RayCast2D" type="RayCast2D" parent="Casts/Shoot_Casts"]
position = Vector2( 0, -5 )
enabled = true
cast_to = Vector2( -135, -135 )
collision_mask = 10

[node name="Shoot-LeftDown-RayCast2D" type="RayCast2D" parent="Casts/Shoot_Casts"]
enabled = true
cast_to = Vector2( -135, 135 )
collision_mask = 10

[node name="Shoot-Up-Right-Pos" type="Position2D" parent="Casts/Shoot_Casts"]
position = Vector2( -5, -20 )
rotation = -1.5708

[node name="Shoot-Up-Left-Pos" type="Position2D" parent="Casts/Shoot_Casts"]
position = Vector2( 5, -20 )
rotation = -1.5708

[node name="Shoot-Down-Right-Pos" type="Position2D" parent="Casts/Shoot_Casts"]
position = Vector2( -7, 30 )
rotation = 1.5708

[node name="Shoot-Down-Left-Pos" type="Position2D" parent="Casts/Shoot_Casts"]
position = Vector2( 7, 30 )
rotation = 1.5708

[node name="Shoot-Right-Up-Pos" type="Position2D" parent="Casts/Shoot_Casts"]
position = Vector2( 10, -15 )
rotation = -0.785398

[node name="Shoot-Left-Up-Pos" type="Position2D" parent="Casts/Shoot_Casts"]
position = Vector2( -10, -15.1047 )
rotation = -2.35619

[node name="Shoot-Right-Down-Pos" type="Position2D" parent="Casts/Shoot_Casts"]
position = Vector2( 15, 15 )
rotation = 0.785398

[node name="Shoot-Left-Down-Pos" type="Position2D" parent="Casts/Shoot_Casts"]
position = Vector2( -15, 15 )
rotation = 2.35619

[node name="Shoot-Right-Pos" type="Position2D" parent="Casts/Shoot_Casts"]
position = Vector2( 10, 0 )

[node name="Shoot-Left-Pos" type="Position2D" parent="Casts/Shoot_Casts"]
position = Vector2( -10, 0 )
rotation = -3.14159

[node name="Area2D-On_Ladder" type="Area2D" parent="."]
editor/display_folded = true
collision_layer = 32768
collision_mask = 32

[node name="CollisionShape2D" type="CollisionShape2D" parent="Area2D-On_Ladder"]
position = Vector2( 0, -23 )
shape = SubResource( 3 )

[node name="AnimationPlayer3" type="AnimationPlayer" parent="."]
anims/Idle-Mid = SubResource( 4 )
anims/Jump-Down = SubResource( 5 )
anims/Jump-Up = SubResource( 6 )
anims/Ladder-Up = SubResource( 7 )
anims/Run-Mid = SubResource( 8 )
anims/Shoot-Down = SubResource( 9 )
anims/Shoot-Right = SubResource( 10 )
anims/Shoot-Right-Down = SubResource( 11 )
anims/Shoot-Right-Up = SubResource( 12 )
anims/Shoot-Up = SubResource( 13 )

[node name="Sprite" type="Sprite" parent="."]
position = Vector2( 0, -30 )
texture = ExtResource( 4 )
vframes = 4
hframes = 20
[connection signal="timeout" from="Timer_Shoot" to="." method="_on_Timer_Shoot_timeout"]
[connection signal="body_entered" from="Area2D-On_Ladder" to="." method="_on_Area2DOn_Ladder_body_entered"]
[connection signal="body_exited" from="Area2D-On_Ladder" to="." method="_on_Area2DOn_Ladder_body_exited"]
